
// this file was generated by create_new_folder_project.js

package classes_lesson

import kotlin_helpers.*

fun main() {

    println("main function  was executed")

    val o_i_am_valid = i_am_valid()
    println(o_i_am_valid)

    val o_i_have_a_dedicated_constructor = i_have_a_dedicated_constructor("super cool")
    println(o_i_have_a_dedicated_constructor)

    val o_init_order_demo = init_order_demo("a", "b")
    println(o_init_order_demo)

    val o_constructor_params_as_member_props = constructor_params_as_member_props("Aa", 1234)
    println(o_constructor_params_as_member_props)


    val o_dogg = Dogg("snoop")

    o_dogg.run()

    o_dogg.make_noise()
}



class i_am_valid


class i_have_a_dedicated_constructor constructor(s_any: String){ 
    
    init{
        println("i_have_a_dedicated_constructor constructor called, with arg $s_any")

    }

}


class init_order_demo(s_a : String, s_b: String){
    val s_a = s_a
    init{
        println("first init block")
    }
    val s_b = s_b
    init{
        println("second init block")
    }
    
}


class constructor_params_as_member_props(val s_readonly_var : String , var n_mutable_num : Int){ //note the trailing/last comma is legal 
    init{
        println("member prop s_a: $s_readonly_var")
        n_mutable_num ++;
    }
}


open class Animal(s_name : String){
    
    fun run(){
        println("animal is running...")
    }

    fun lurk(){
        println("animal is lurking...")
    }

    open fun make_noise(){
        println("animal is making a noise...")
    }

    open fun b_can_swim(): Boolean{ 
        return false
    }
}



open class Dogg(s_name : String) : Animal(s_name) {

    override fun make_noise(){
        println("wuff wuff!")
    }

    final override fun b_can_swim(): Boolean{ // every dogg can swim, so we prevent overriding in child classes with final 
        return true
    }
}


class Deutscher_schaefer(s_name: String) : Dogg(s_name){ 

    override fun make_noise(){
        println("huau huau !!")
    }
}