
// this file was generated by create_new_folder_project.js

package game2048_console

import kotlin_helpers.*



private const val ANSI_COLOR_BLACK = "\u001b[30m"
private const val ANSI_COLOR_RED = "\u001b[31m"
private const val ANSI_COLOR_GREEN = "\u001b[32m"
private const val ANSI_COLOR_YELLOW = "\u001b[33m"
private const val ANSI_COLOR_BLUE = "\u001b[34m"
private const val ANSI_COLOR_MAGENTA = "\u001b[35m"
private const val ANSI_COLOR_CYAN = "\u001b[36m"
private const val ANSI_COLOR_WHITE = "\u001b[37m"

private const val ANSI_BG_COLOR_BLACK = "\u001b[40m"
private const val ANSI_BG_COLOR_RED = "\u001b[41m"
private const val ANSI_BG_COLOR_GREEN = "\u001b[42m"
private const val ANSI_BG_COLOR_YELLOW = "\u001b[43m"
private const val ANSI_BG_COLOR_BLUE = "\u001b[44m"
private const val ANSI_BG_COLOR_MAGENTA = "\u001b[45m"
private const val ANSI_BG_COLOR_CYAN = "\u001b[46m"
private const val ANSI_BG_COLOR_WHITE = "\u001b[47m"

private const val ANSI_COLOR_UNSATURATED_BLACK = "\u001b[90m"
private const val ANSI_COLOR_UNSATURATED_RED = "\u001b[91m"
private const val ANSI_COLOR_UNSATURATED_GREEN = "\u001b[92m"
private const val ANSI_COLOR_UNSATURATED_YELLOW = "\u001b[93m"
private const val ANSI_COLOR_UNSATURATED_BLUE = "\u001b[94m"
private const val ANSI_COLOR_UNSATURATED_MAGENTA = "\u001b[95m"
private const val ANSI_COLOR_UNSATURATED_CYAN = "\u001b[96m"
private const val ANSI_COLOR_UNSATURATED_WHITE = "\u001b[97m"

private const val ANSI_BG_COLOR_UNSATURATED_BLACK = "\u001b[100m"
private const val ANSI_BG_COLOR_UNSATURATED_RED = "\u001b[101m"
private const val ANSI_BG_COLOR_UNSATURATED_GREEN = "\u001b[102m"
private const val ANSI_BG_COLOR_UNSATURATED_YELLOW = "\u001b[103m"
private const val ANSI_BG_COLOR_UNSATURATED_BLUE = "\u001b[104m"
private const val ANSI_BG_COLOR_UNSATURATED_MAGENTA = "\u001b[105m"
private const val ANSI_BG_COLOR_UNSATURATED_CYAN = "\u001b[106m"
private const val ANSI_BG_COLOR_UNSATURATED_WHITE = "\u001b[107m"

private const val ANSI_COLOR_RESET = "\u001b[0m"

fun main() {

    //    println("main function  was executed")

    println("""
    WELCOME TO 2048
    a=Left, s=Right, w=Up, y=Down, q=Quit
    """.trimIndent()
    )
    
    val o_game = Game()

    var chr = readLine()!![0]
    // println(enteredString)

    while(chr.toString() != "q" && !o_game.b_is_over){

        if(chr.toString() == "w"){
            o_game.moveUp()
        }
        if(chr.toString() == "s"){
            o_game.moveDown()
        }
        if(chr.toString() == "a"){
            o_game.moveLeft()
        }
        if(chr.toString() == "d"){
            o_game.moveRight()
        }
        if(chr.toString() == "q"){
            o_game.gameOver()
        }

        chr = readLine()!![0]
    }

}



class Game() {

    // var a_point_2_d_available = MutableList(1) {Point_2_d(0,0)}
    
    var a_point_2_d_available = mutableListOf<Point_2_d>()
    var a_game_objects = mutableListOf<Game_object>()

    var n_width = 4
    var n_height = 4

    var a_game_objects_positions_changed = false

    var b_is_over = false 

    var line_x_pre_suffix = "|"
    var line_y_pre_suffix = "-"

    val a_canvas = get_empty_a_canvas()
    
    // var n_value_max_exponent = 13;
    var n_value_max_exponent = 6;

    var n_chars_per_y = 1
    var n_chars_per_x = 2


    init{
        a_game_objects.add(
            Game_object(
                Point_2_d(0, 1),
                2,
                "red"
            )
        )
        
        a_game_objects.add(
            Game_object(
                Point_2_d(0, 3),
                2,
                "red"
            )
        )
        render()
    }


    fun gameOver(){
        val a_game_objects_sorted = a_game_objects.sortBy{ 
            o -> o.value 
        }
        println("GAME OVER!")
        
        // println("score:"+a_game_objects_sorted[0].value)
    }
    fun moveUp(){
        new_frame("0", "-")
    }
    fun moveDown(){
        new_frame("0", "+")
    }
    fun moveLeft(){
        new_frame("-", "0")
    }
    fun moveRight(){
        new_frame("+", "0")
    }

    fun f_b_game_is_over(): Boolean{
        
        return a_game_objects.count() == (n_width * n_height);
    
    }


    fun new_frame(s_direction_x: String, s_direction_y: String ){
        
        //a_game_objects = mutableListOf<Game_object>()
        b_is_over = f_b_game_is_over()
        if(b_is_over){
            gameOver()
        }

        a_game_objects_positions_changed = false

        // we first have to update the game objects !!
        update_a_game_objects(s_direction_x, s_direction_y) 

        if(a_game_objects_positions_changed){
            spawn_new_game_object()
        }

        // add new object

        render()
    }

    fun spawn_new_game_object(){
        while(true){

            var o_random_game_object = get_random_game_object()
            
            var a_filtered_a_game_objects = a_game_objects.filter{
                i -> 
                i.o_point_2_d.x == o_random_game_object.o_point_2_d.x
                &&
                i.o_point_2_d.y == o_random_game_object.o_point_2_d.y
            }
            if(a_filtered_a_game_objects.isNullOrEmpty()){
                dnd("new random game object")
                dnd("o_random_game_object.o_point_2_d.x")
                dnd(o_random_game_object.o_point_2_d.x)
                dnd("o_random_game_object.o_point_2_d.y")
                dnd(o_random_game_object.o_point_2_d.y)

                a_game_objects.add(
                    o_random_game_object
                )

                break
            }
        }
    }
    /*
    * loops through the rows or columns of the counter axis 
    if input was ↑↓ up or down
        loops through x axis 
    if input was ←→ left or right
        loops through y axis 
    */

    fun update_a_game_objects(s_direction_x: String, s_direction_y: String){
        

        if(s_direction_y != "0"){ // up
            for(n_x in (0..(n_width-1))){
                update_row_or_col(s_direction_y, "y", n_x);
            }
        }
        if(s_direction_x != "0"){ // up
            for(n_y in (0..(n_height-1))){
                update_row_or_col(s_direction_x, "x", n_y);
            }
        }
    }

    /* 
    * loops through a row or column from behind, 
    * checks every cell if there is an object 
    *  if no object
    *       n_free_count ++
    * 
    *  if object
    *       if last object matches value
    *           last object gets added the value 2 + 2 = 4
    *           current object gets destroyed
    *           n_free_count ++
    *
    */
    fun update_row_or_col(s_direction: String, s_axis: String, n_index_other_axis: Int){

        var n_free_count = 0;

        var last_o_game_object : Game_object? = null;

        var n_end =  n_height -1

        if(s_axis == "y"){
            n_end = n_height -1
        }
        if(s_axis == "x"){
            n_end = n_width -1
        }

        for(n_i in 0..n_end){
            
            var n_index = n_i

            if(s_direction == "+"){
                n_index = n_end - n_i
            }

            var a_filtered_a_game_objects = a_game_objects.filter{i -> i.o_point_2_d.x == n_index_other_axis && i.o_point_2_d.y == n_index}

            if(s_axis == "y"){
                a_filtered_a_game_objects = a_game_objects.filter{i -> i.o_point_2_d.x == n_index_other_axis && i.o_point_2_d.y == n_index}
            }
            if(s_axis == "x"){
                a_filtered_a_game_objects = a_game_objects.filter{i -> i.o_point_2_d.x == n_index && i.o_point_2_d.y == n_index_other_axis}
            }
            
            if(a_filtered_a_game_objects.isNullOrEmpty()){
                n_free_count++;
                
            }else{

                var o_game_object = a_filtered_a_game_objects.first();
                
                if(last_o_game_object?.value == o_game_object.value){
                    
                    // destroy object 
                    // set last object val 
                    // n_free_count ++
                    last_o_game_object.value += o_game_object.value // 2+2 = 4... , or with other nums 
                    n_free_count += 1
                    a_game_objects.remove(o_game_object) // destroy object // manually garbarge collect? 
                }

                if(last_o_game_object?.value != o_game_object.value){
                    if(n_free_count > 0){
                        a_game_objects_positions_changed = true
                    }
                    //o_game_object.o_point_2_d.y = eval(s_direction + n_free_count.toString())
                    if(s_direction == "-"){
                        // o_game_object.o_point_2_d[axis] -= n_free_count
                        if(s_axis == "x"){
                            o_game_object.o_point_2_d.x -= n_free_count
                        }
                        if(s_axis == "y"){
                            o_game_object.o_point_2_d.y -= n_free_count
                        }
                        
                    }
                    if(s_direction == "+"){
                        // o_game_object.o_point_2_d[axis] += n_free_count
                        if(s_axis == "x"){
                            o_game_object.o_point_2_d.x += n_free_count
                        }
                        if(s_axis == "y"){
                            o_game_object.o_point_2_d.y += n_free_count
                        }
                    }

                }

                last_o_game_object = o_game_object

            }

        }
    }
    fun get_random_game_object(): Game_object{
        
        var x = (0..n_width-1).random()
        var y = (0..n_height-1).random()

        val o_game_object = Game_object(
            Point_2_d(x,y),
            Math.pow(
                2.toDouble(),
                1.toDouble(),
                //((1..n_value_max_exponent).random()).toDouble()
                ).toInt(),
            "red"
        )
        return o_game_object

    }
    fun x_y_allowed(x: Int, y : Int): Boolean{ 
        var b_in_boundries = false
        if(
            x >= 0 && x <= n_width
            &&
            y >= 0 && y <= n_height
        ){ 
            b_in_boundries = true 
        }
        return b_in_boundries
    }


    fun render(){

        var a_canvas = get_empty_a_canvas()
        
        for(i in a_game_objects){ 

            a_canvas[i.o_point_2_d.y][i.o_point_2_d.x] = i.value.toString();
            //print(i.value.toString())
        }
        //var n_upscaled_width = width * 2; 

        var lines = (a_canvas.size-1) *  n_chars_per_y

        var y = 0;

        var divider_y = line_y_pre_suffix.repeat((n_width * n_chars_per_x) + n_width+1)


        for(line in 0..lines){
            
            var s_line = " ".repeat(n_width * n_chars_per_x)

            if(line % n_chars_per_y == 0){
                
                s_line = line_x_pre_suffix

                for(x in 0..n_width-1){

                    var s_value = a_canvas[y][x].toString()
                    s_value = s_value.padStart(n_chars_per_x, ' '); 

                    if(a_canvas[y][x] == "2"){ s_value = ANSI_COLOR_UNSATURATED_RED + s_value + ANSI_COLOR_RESET }
                    if(a_canvas[y][x] == "4"){ s_value = ANSI_COLOR_UNSATURATED_GREEN + s_value + ANSI_COLOR_RESET }
                    if(a_canvas[y][x] == "8"){ s_value = ANSI_COLOR_UNSATURATED_YELLOW + s_value + ANSI_COLOR_RESET }
                    if(a_canvas[y][x] == "16"){ s_value = ANSI_COLOR_UNSATURATED_BLUE + s_value + ANSI_COLOR_RESET }
                    if(a_canvas[y][x] == "32"){ s_value = ANSI_COLOR_UNSATURATED_MAGENTA + s_value + ANSI_COLOR_RESET }
                    if(a_canvas[y][x] == "64"){ s_value = ANSI_COLOR_UNSATURATED_CYAN + s_value + ANSI_COLOR_RESET }
                    

                    s_line += s_value+line_x_pre_suffix
                    // s_line += ANSI_COLOR_UNSATURATED_RED+s_value+ANSI_COLOR_RESET +line_x_pre_suffix;
    
                    //println(a_canvas[y][x].toString())
                }
                y++
                println(divider_y) 

            }

            println(s_line)
        }

        println(divider_y) 

    }

    fun get_empty_a_canvas(): Array<Array<String>>{

        // return Array (2){ " " }

        return Array(n_height) { Array(n_width){" ".padStart(n_chars_per_x,' ')} }
    }


}



class Game_object(
    o_point_2_d : Point_2_d, 
    value: Int, 
    color: String

){ 
    var o_point_2_d = o_point_2_d 
    var value = value 
    var color = color 
}

class Point_2_d(
    x: Int, 
    y: Int) {
    var x = x
    var y = y 
}

