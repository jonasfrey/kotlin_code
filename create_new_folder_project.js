var arguments = process.argv

var node_binary = arguments.shift()
var script_path_filename = arguments.shift()

const { exec } = require("child_process");

var path = require('path');
var current_node_script_name = path.basename(__filename);

if(arguments.length == 0){
    console.warn('no foldername specified, do it with:')
    console.info(`${node_binary.split('/').pop()} ${script_path_filename.split('/').pop()} the_folder_name_here`)
    process.exit(1)
}

var folder_name = arguments.shift()

var fs = require('fs');
var dir = './'+folder_name;

if (!fs.existsSync(dir)){
    
    fs.mkdirSync(dir);
   
}else{
    //console.log(`directory : ${folder_name} already exists`)
}

var generated_by_nodefile_header = `this file was generated by ${current_node_script_name}`; 
 
var compile_and_run_file_content = `
# ${generated_by_nodefile_header}

# compile
kotlinc ${dir}.kt -include-runtime -d ${dir}.jar

./run.sh

`
var run_file_content = `
# ${generated_by_nodefile_header}

# run 
java -jar ${dir}.jar
`
var run_file_name = `run.sh`

var kotlin_file_content = `
// this file was generated by ${current_node_script_name}

fun main() {
    println("main function  was executed")
}
`

var kotlin_file_filename = dir+".kt"

var compile_and_run_file_name = "compile_and_run.sh"

if (!fs.existsSync(dir+'/'+compile_and_run_file_name)){

    fs.writeFile(dir+'/'+compile_and_run_file_name, compile_and_run_file_content, function(err) {
        if(err) {
            return console.log(err);
        }
        console.log("The "+dir+'/'+compile_and_run_file_name+" file was saved!");
        
        // fs.chmod( 
        //     dir+'/'+compile_and_run_file_name, 
        //     //"+x" //not working
        //     777 ,
        //     function(){
        //         console.log("The "+dir+'/'+compile_and_run_file_name+" file was made executable (chmod +x)!");
        //     } )
        exec_return = exec("chmod +x "+dir+'/'+compile_and_run_file_name, function(err, stdout, stderr) {
            if (err) {
              // should have err.code here?  
            }
            console.log(stdout);
          });
          

    });


}
if (!fs.existsSync(dir+'/'+run_file_name)){

    fs.writeFile(dir+'/'+run_file_name, run_file_content, function(err) {
        if(err) {
            return console.log(err);
        }
        console.log("The "+dir+'/'+run_file_name+" file was saved!");
        
        // fs.chmod( 
        //     dir+'/'+run_file_name, 
        //     //"+x" //not working
        //     777 ,
        //     function(){
        //         console.log("The "+dir+'/'+run_file_name+" file was made executable (chmod +x)!");
        //     } )
        exec_return = exec("chmod +x "+dir+'/'+run_file_name, function(err, stdout, stderr) {
            if (err) {
              // should have err.code here? 
                console.log("asdfasdf asdfa asdf asdfKK");
                console.log(err);
                console.log(dir);

            }
            console.log("asdf asdf asdf adfs fads");
          });
          

    });


}

if (!fs.existsSync(dir+'/'+kotlin_file_filename)){

    fs.writeFile(dir+'/'+kotlin_file_filename, kotlin_file_content, function(err) {
        if(err) {
            return console.log(err);
        }
        console.log("The "+dir+'/'+kotlin_file_filename+" file was saved!");
    }); 

}

console.log('done')