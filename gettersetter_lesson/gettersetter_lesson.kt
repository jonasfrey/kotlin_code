

// this file was generated by create_new_folder_project.js

package gettersetter_lesson

import kotlin_helpers.*


fun main() {
    println("main function  was executed")
    
    val o_vendor_id = Polynom_number("0x0f2d")
    println("id as dec")
    println(o_vendor_id.n_dec)
    println("id as hex")
    println(o_vendor_id.s_hex)
    println("id as hex")
    println(o_vendor_id.s_bin)

    val o_vendor_id2 = Polynom_number(11235)
    println("id as dec")
    println(o_vendor_id2.n_dec)
    println("id as hex")
    println(o_vendor_id2.s_hex)
    println("id as hex")
    println(o_vendor_id2.s_bin)

    val o_vendor_id3 = Polynom_number("0b1010101")
    println("id as dec")
    println(o_vendor_id3.n_dec)
    println("id as hex")
    println(o_vendor_id3.s_hex)
    println("id as hex")
    println(o_vendor_id3.s_bin)

    //what a fool i am , passing a bin string without 0 in front of b
    val o_vendor_id4 = Polynom_number("b11100011")
    println("id as dec")
    println(o_vendor_id4.n_dec)
    println("id as hex")
    println(o_vendor_id4.s_hex)
    println("id as hex")
    println(o_vendor_id4.s_bin)

    //what a fool i am , passing a bin string without 0 in front of x
    val o_vendor_id5 = Polynom_number("xD")
    println("id as dec")
    println(o_vendor_id5.n_dec)
    println("id as hex")
    println(o_vendor_id5.s_hex)
    println("id as hex")
    println(o_vendor_id5.s_bin)


}


class Polynom_number(
    int_or_string: Any
    ){
    
    var s_bin_prefix_separator = "0b"
    var s_hex_prefix_separator = "0x"

	var _s_hex: String = s_hex_prefix_separator + Integer.toHexString(0)
	var _s_bin: String = s_bin_prefix_separator + Integer.toBinaryString(0)
	var _n_dec: Int = 0
    
    var s_hex: String
    	set(value: String){
            val s_prefix_separator = s_hex_prefix_separator.split("0").last().lowercase()//if any fool passes the string as xd4 instead of 0xd4
            val s_value_without_prefix = value.lowercase().split(s_prefix_separator).last()
            this._n_dec = s_value_without_prefix.toInt(radix = 16)
            this._s_hex = s_value_without_prefix
            this._s_bin = Integer.toBinaryString(this._n_dec)
        }
        get(){
            return s_hex_prefix_separator + this._s_hex
        } 

	var n_dec : Int
    	set(value: Int){
        	this._n_dec = value
            this.s_hex = Integer.toHexString(value)
            this.s_bin = Integer.toBinaryString(value)
        }
        get(){
           return this._n_dec 
        }

    var s_bin: String
        set(value: String){
            val s_prefix_separator = s_bin_prefix_separator.split("0").last().lowercase()//if any fool passes the string as b001 instead of 0b001
            val s_value_without_prefix = value.lowercase().split(s_prefix_separator).last() 
            this._n_dec = s_value_without_prefix.toInt(radix = 2);
            this._s_bin = s_value_without_prefix
            this._s_hex = Integer.toBinaryString(this._n_dec)
        }
        get(){
            return s_bin_prefix_separator + this._s_bin
        }
    init{
        if(int_or_string is String){
            val s_lowrcase_trimmed = int_or_string.lowercase().trim()
            if(
                s_lowrcase_trimmed.indexOf(s_bin_prefix_separator.lowercase()) != 0 
                &&
                s_lowrcase_trimmed.indexOf(s_hex_prefix_separator.lowercase()) != 0
            ){
                throw Exception(int_or_string + " must start with ${s_hex_prefix_separator} (hexadecimal) or ${s_bin_prefix_separator} (binary)")
            }
            var b_int_or_string_is_bin = false;
            var b_int_or_string_is_hex = false;
            if(s_lowrcase_trimmed.indexOf(s_bin_prefix_separator.lowercase()) == 0){
                this.s_bin = int_or_string
                b_int_or_string_is_bin = true;
            }
            if(s_lowrcase_trimmed.indexOf(s_hex_prefix_separator.lowercase()) == 0){
                this.s_hex = int_or_string
                b_int_or_string_is_hex = true;
            }

            if(!b_int_or_string_is_bin && !b_int_or_string_is_bin){

            }

        }
        if(int_or_string is Int){
            this.n_dec = int_or_string
        }
    }
}

class USB_connections_manager(){

    var proc_bus_input_devices = mutableListOf<Proc_bus_input_device>()

    init{
        
        f_update_proc_bus_input_devices();
    }

    fun f_update_proc_bus_input_devices(){
        
        proc_bus_input_devices = mutableListOf<Proc_bus_input_device>()

        val a_devices_lines = s_multiline.split("\n\n"); 

        for(s_device_lines in a_devices_lines){
            println(s_device_lines)
        }

        for(s_device_lines in a_devices_lines){

            var a_devices_lines_parts = s_device_lines.split("\n")
            
            var a_bus_vendor_product_version = a_devices_lines_parts.filter{s -> s.lowercase().indexOf("vendor") != -1}.first().split(" ")
            var a_name = a_devices_lines_parts.filter{s -> s.lowercase().indexOf("name") != -1}.first().split(" ")
            

            
            val o_proc_bus_input_device = Proc_bus_input_device (
                a_bus_vendor_product_version.filter{s -> s.lowercase().indexOf("bus") != -1}.first().split("=").last().trim(),
                a_bus_vendor_product_version.filter{s -> s.lowercase().indexOf("vendor") != -1}.first().split("=").last().trim(),
                a_bus_vendor_product_version.filter{s -> s.lowercase().indexOf("product") != -1}.first().split("=").last().trim(),
                a_bus_vendor_product_version.filter{s -> s.lowercase().indexOf("version") != -1}.first().split("=").last().trim(),
                a_devices_lines_parts.filter{s -> s.lowercase().indexOf("name") != -1}.first().split("=").last(),
                s_device_lines
            )
                
            proc_bus_input_devices.add(o_proc_bus_input_device)
        }


    }
}



}


class Proc_bus_input_device(
    val s_bus : String,
    val s_vendor : String,
    val s_product : String,
    val s_version : String,
    val s_name : String,
    val s_multilinestring_proc_bus_input_devices : String
){
    val s_bus : String,
    val s_vendor : String,
    val s_product : String,
    val s_version : String,
    val s_name : String,
    val s_multilinestring_proc_bus_input_devices : String

}