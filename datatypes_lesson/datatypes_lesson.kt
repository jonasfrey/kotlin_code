
// this file was generated by create_new_folder_project.js

package datatypes_lesson

import kotlin_helpers.*

// fun integers(){

//     //| Type | Size (bits) | Min value | Max value |
//     //| --- | --- | --- | --- |
//     //| `Byte` | 8   | -128 | 127 |
//     //| `Short` | 16  | -32768 | 32767 |
//     //| `Int` | 32  | -2,147,483,648 (-231) | 2,147,483,647 (231 \- 1) |
//     //| `Long` | 64  | -9,223,372,036,854,775,808 (-263) | 9,223,372,036,854,775,807 (263 \- 1) |


//     val n_ubyte_max : UByte = 255;// 256-1;
//     dnd(n_ubyte_max)

//     val n_ubyte_min : UByte = 0; //
//     dnd(n_ubyte_min)

    
//     val n_byte_max : Byte = 127; // 4 bit positive
//     dnd(n_byte_max)

//     val n_byte_min : Byte = -128; // 4 bit negative
//     dnd(n_byte_min)

//     // 16 bit 
    
//     val n_ushort_max : UShort = 65535//65536-1
//     dnd(n_ushort_max)

//     val n_ushort_min : UShort = 0
//     dnd(n_ushort_min)

    
//     val n_short_max : Short = 32767; //8 bit positive
//     dnd(n_short_max)

//     val n_short_min : Short = -32768; // 8 bit negative 
//     dnd(n_short_min)


    
//     val n_uint_max : UInt = 4294976295//4294976296-1; 
//     dnd(n_uint_max)

//     val n_uint_min : UInt = 0;
//     dnd(n_uint_min)

    
//     val n_int_max : Int = 2147483657; // 32 bit
//     dnd(n_int_max)

//     val n_int_min : Int = // 32 bit
//     dnd(n_int_min)


//     // 64 bit long (L suffix in kotlin)    
//     val n_ulong : ULong = 18446744073709551615L// 18446744073709551616L -1
//     dnd(n_ulong)

//     val n_ulong : ULong = 0L
//     dnd(n_ulong)

    
//     val n_long_max : ULong =  9223372036854775807L
//     dnd(n_long_max)

//     val n_long_min : ULong = -9223372036854775808L
//     dnd(n_long_min)

// }
fun floats(){ 
    // | Type       | Size (bits)   | Significant bits  | Exponent bits | Decimal digits    |
    // | ---        | ---           | ---               | ---           | ---               |
    // | `Float`    | 32            | 24                | 8             | 6-7               |
    // | `Double`   | 64            | 53                | 11            | 15-16             |
    
    val n_pi = 3.14; // double 
    dnd(n_pi)
    //      val n_one : Double = 1 // error: type mismatch
    
    val n_tau = 3.14159265358979323846264338327950288419716 *2
    dnd(n_tau)
    
    val n_tau_as_float = 3.14159265358979323846264338327950288419716f *2
    dnd(n_tau_as_float)

    val n_tau_casted_to_float = n_tau.toFloat()
    dnd(n_tau_casted_to_float)


    // fun Double.round(decimals: Int = 2): Double = "%.${decimals}f".format(this).toDouble()
    // val n_tau_to_three_decimal_places = n_tau_as_float.round(3)

    //to n decimal places
    val n_tau_to_three_decimal_places = String.format("%.3f", n_tau_as_float).toDouble()
    dnd(n_tau_to_three_decimal_places)


}

fun arrays(){

    dnd("fun arrays:")
    val n_length = 3
    //      val a_fixed_nums = Array(n_length) //  error: no value passed for parameter init
    val a_fixed_nums = Array(n_length) { i -> i.toString() + "." }

    val s_type = a_fixed_nums::class.simpleName
    
    print(s_type)

    print(a_fixed_nums.size)


    val a_mutable_list_of_objects = MutableList(1) { Simple_object(1) }
    
    println(a_mutable_list_of_objects)

    for( i in 0..a_mutable_list_of_objects.size){
        println(a_mutable_list_of_objects[i])
    }
    // dnd(a_fixed_nums)
    //dnd(s_type)

    // if(s_type.toString().lowercase().contains("array")){
    //     for(i in 1..a_fixed_nums.lastIndex){
    //         println(a_fixed_nums[i])
    //     }
    // }

    dnd(a_fixed_nums)


}

fun strings(){

    var s_test = "1234"; 
    println(s_test.toInt());

    var s_test_not_trimmed = "  1234  "; 
    //      println(s_test_not_trimmed.toInt()); // java.lang.NumberFormatException: For input string:
 
    var s_test_trimmed = s_test_not_trimmed.trim();
    println(s_test_trimmed.toInt());


    var s_not_colored =  "NO_ANSI_AT_ALL"
    println(s_not_colored)
    
    var s_colored = ANSI_BG_COLOR_GREEN+"ANSI_BG_COLOR_GREEN"+ANSI_COLOR_RESET
    println(s_colored)

    var s_test_colored_vs_not_colored_n = "s_test_colored_vs_not_colored"; 
    println(s_test_colored_vs_not_colored_n)

    println("length of same string: not colored: "+ s_test_colored_vs_not_colored_n.length)
    
    var s_test_colored_vs_not_colored = ANSI_COLOR_RED+"s_test_colored_vs_not_colored"+ANSI_COLOR_RESET; 
    println(s_test_colored_vs_not_colored)

    println("length of same string: colored: "+ s_test_colored_vs_not_colored.length); 
    
}

class Simple_object(
    n_num: Int) {
    val n_num = n_num
}

fun main() {


    // integers()

    // floats()

    // arrays()

    strings()


}
