
// this file was generated by create_new_folder_project.js

package usb_midi_device

import java.lang.ProcessBuilder.Redirect
import java.util.concurrent.TimeUnit

import kotlin.*
import kotlin.coroutines.*
import kotlin.system.exitProcess
import kotlin.concurrent.thread


fun main() {
    println("main function  was executed")

    // Bus 003 Device 014: ID 1b1c:1b09 Corsair Vengeance K70R keyboard
    //Bus 001 Device 006: ID 09e8:0028 AKAI  Professional M.I. Corp. APC MINI
    val  o_midi_device = Midi_device("09e8","0028");

    // fun f_on_usb_connection(){
    //     println("usb connection successfull!")
    // }    
    // o_midi_device.f_on_usb_connection = f_on_usb_connection

    println(o_midi_device.b_usb_connected)

}


class Midi_device(
    s_vendor_id_hex: String,
    s_product_id_hex: String
){

    val s_vendor_id_hex = s_vendor_id_hex
    val s_product_id_hex = s_product_id_hex
    
    val o_polynom_number_vendor = Polynom_number(s_vendor_id_hex, 16);
    val o_polynom_number_product = Polynom_number(s_product_id_hex, 16);
    
    var _b_usb_connected = false

    var b_usb_connected: Boolean
        set(value: Boolean){
            if(this._b_usb_connected != value){
                if(value){
                    f_on_usb_connection()
                }else{
                    f_on_usb_disconnection()
                }
            }
            this._b_usb_connected = value
        }
        get(){
            return this._b_usb_connected
        }

    var o_usb_connections_manager = USB_connections_manager()
    
    init{


        val process = ProcessBuilder("whami").start();

        process.inputStream.reader(Charsets.UTF_8).use{
            // println(it.readText())
            if(it.readText() != "0"){
                throw Exception("permission denied: run the application as root")
                exitProcess(1)
            }else{
                thread(start = true){
                    while(true){
                        Thread.sleep(1_00)
                        f_update_b_usb_connected()
                        println("${Thread.currentThread()} is running")
                    }
                }
            }
            
        }
        process.waitFor(10, TimeUnit.SECONDS)


        }

    
    fun f_update_b_usb_connected(){

        b_usb_connected = o_usb_connections_manager.f_b_is_connected(o_polynom_number_vendor.s_hex, o_polynom_number_vendor.s_hex)
        
    }
    fun f_on_usb_connection(){
        println("usb connection successfull!")
    }
    fun f_on_usb_disconnection(){
        println("usb dis-connection successfull!")
    }
}



class Polynom_number(
    int_or_hexstring_or_binstring: Any, 
    n_base: Int?
    ){
    
    var s_bin_prefix_separator = "0b"
    var s_hex_prefix_separator = "0x"

	var _s_hex: String = s_hex_prefix_separator + Integer.toHexString(0)
	var _s_bin: String = s_bin_prefix_separator + Integer.toBinaryString(0)
	var _n_dec: Int = 0
    
    var s_hex: String
    	set(value: String){
            val s_prefix_separator = s_hex_prefix_separator.split("0").last().lowercase()//if any fool passes the string as xd4 instead of 0xd4
            val s_value_without_prefix = value.lowercase().split(s_prefix_separator).last()
            this._n_dec = s_value_without_prefix.toInt(radix = 16)
            this._s_hex = s_value_without_prefix
            this._s_bin = Integer.toBinaryString(this._n_dec)
        }
        get(){
            return s_hex_prefix_separator + this._s_hex
        } 

	var n_dec : Int
    	set(value: Int){
        	this._n_dec = value
            this.s_hex = Integer.toHexString(value)
            this.s_bin = Integer.toBinaryString(value)
        }
        get(){
           return this._n_dec 
        }

    var s_bin: String
        set(value: String){
            val s_prefix_separator = s_bin_prefix_separator.split("0").last().lowercase()//if any fool passes the string as b001 instead of 0b001
            val s_value_without_prefix = value.lowercase().split(s_prefix_separator).last() 
            this._n_dec = s_value_without_prefix.toInt(radix = 2);
            this._s_bin = s_value_without_prefix
            this._s_hex = Integer.toBinaryString(this._n_dec)
        }
        get(){
            return s_bin_prefix_separator + this._s_bin
        }
    init{
        if(int_or_hexstring_or_binstring is String){
            var s_hexstr_or_binstr_lowrcase_trimmed = int_or_hexstring_or_binstring.lowercase().trim()
            
            var b_interpret_as_bin = false;
            var b_interpret_as_hex = false;

            if(n_base == 16){
                b_interpret_as_hex = true;
            }
            if(s_hexstr_or_binstr_lowrcase_trimmed.indexOf(s_hex_prefix_separator.lowercase()) == 0){
                this.s_hex = int_or_hexstring_or_binstring
                b_interpret_as_hex = true;
            }else{
                s_hexstr_or_binstr_lowrcase_trimmed = s_hex_prefix_separator + s_hexstr_or_binstr_lowrcase_trimmed
            }
            if(n_base == 2){
                b_interpret_as_bin = true;
            }
            if(s_hexstr_or_binstr_lowrcase_trimmed.indexOf(s_bin_prefix_separator.lowercase()) == 0){
                this.s_bin = int_or_hexstring_or_binstring
                b_interpret_as_bin = true;
            }else{
                s_hexstr_or_binstr_lowrcase_trimmed = s_bin_prefix_separator + s_hexstr_or_binstr_lowrcase_trimmed
            }

            if(b_interpret_as_bin){
                this.s_bin = s_hexstr_or_binstr_lowrcase_trimmed
            }
            if(b_interpret_as_hex){
                this.s_hex = s_hexstr_or_binstr_lowrcase_trimmed
            }

            if(!b_interpret_as_bin && !b_interpret_as_hex){
                
                throw Exception(int_or_hexstring_or_binstring+ ": must have prefix ${s_hex_prefix_separator} (hexadecimal) or ${s_bin_prefix_separator} (binary) or provide n_base (2: binary, 16: hexadecimal)")

            }

        }
        if(int_or_hexstring_or_binstring is Int){
            this.n_dec = int_or_hexstring_or_binstring
        }
    }
}

class USB_connections_manager(){

    var proc_bus_input_devices = mutableListOf<Proc_bus_input_device>()

    init{
        f_init_proc_bus_input_devices();
    }

    fun f_init_proc_bus_input_devices(){

        proc_bus_input_devices = mutableListOf<Proc_bus_input_device>()

        val process = ProcessBuilder("cat", "/proc/bus/input/devices").start();

        process.inputStream.reader(Charsets.UTF_8).use{
            val s_multiline = it.readText()
            // println(s_multiline)

            val a_devices_lines = s_multiline.split("\n\n"); 

    
            for(s_device_lines in a_devices_lines){
    
                var a_devices_lines_parts = s_device_lines.split("\n")
                
                var a_bus_vendor_product_version = a_devices_lines_parts.filter{s -> s.lowercase().indexOf("vendor") != -1}.first().split(" ")
                var a_name = a_devices_lines_parts.filter{s -> s.lowercase().indexOf("name") != -1}.first().split(" ")
                
    
                val o_proc_bus_input_device = Proc_bus_input_device (
                    a_bus_vendor_product_version.filter{s -> s.lowercase().indexOf("bus") != -1}.first().split("=").last().trim(),
                    "0x"+a_bus_vendor_product_version.filter{s -> s.lowercase().indexOf("vendor") != -1}.first().split("=").last().trim(),
                    "0x"+a_bus_vendor_product_version.filter{s -> s.lowercase().indexOf("product") != -1}.first().split("=").last().trim(),
                    a_bus_vendor_product_version.filter{s -> s.lowercase().indexOf("version") != -1}.first().split("=").last().trim(),
                    a_devices_lines_parts.filter{s -> s.lowercase().indexOf("name") != -1}.first().split("=").last(),
                    s_device_lines
                )
                    
                proc_bus_input_devices.add(o_proc_bus_input_device)
            }
        }
        process.waitFor(10, TimeUnit.SECONDS)

    }

    fun f_b_is_connected(s_vendor_id_hex: String, s_product_id_hex: String): Boolean{

        var o_proc_bus_input_device = proc_bus_input_devices.filter{ 
            o -> o.o_polynom_number_vendor.s_hex == s_vendor_id_hex && o.o_polynom_number_product.s_hex == s_product_id_hex 
        }.first()

        if(o_proc_bus_input_device == null){
            return true
        }else{
            return false
        }

    }


}

class Proc_bus_input_device(
    s_bus : String,
    s_vendor : String,
    s_product : String,
    s_version : String,
    s_name : String,
    s_multilinestring_proc_bus_input_devices : String, 
){
    val s_bus = s_bus
    val s_vendor = s_vendor
    val s_product = s_product
    val s_version = s_version
    val s_name = s_name
    val s_multilinestring_proc_bus_input_devices = s_multilinestring_proc_bus_input_devices

    val o_polynom_number_vendor = Polynom_number(s_vendor, 16);
    val o_polynom_number_product = Polynom_number(s_product, 16);

    var s_vendor_id_hex = o_polynom_number_vendor.s_hex
    var s_product_id_hex = o_polynom_number_product.s_hex

}