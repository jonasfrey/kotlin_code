
// this file was generated by create_new_folder_project.js

package http_request_lesson

import kotlin_helpers.*

// import java.net.URI
// import java.net.http.HttpClient
// import java.net.http.HttpRequest
// import java.net.http.HttpResponse

// import com.github.kittinunf.fuel.httpGet
import java.util.concurrent.TimeUnit



fun make_http_request(s_url: String, callback: (String) -> Unit){

    //unfortunately import java.net.URI ... is not working
    // val client = HttpClient.newBuilder().build();
    // val request = HttpRequest.newBuilder()
    //     .uri(URI.create(s_url))
    //     .build();
        
    // val response = client.send(request, HttpResponse.BodyHandlers.ofString());
    // // println(response.body())

    // callback(response)


    try {
        // "adfs".runCommand(); 

        // val process = ProcessBuilder("modprobe", "usbmon").start();
        val process = ProcessBuilder("curl", s_url).start();
        
        process.inputStream.reader(Charsets.UTF_8).use{
            callback(it.readText())
        }
        process.waitFor(10, TimeUnit.SECONDS)
        
    } catch (ex: UnsupportedOperationException) {
        // UnsupportedOperationException or IllegalArgumentException if t
        println("UnsupportedOperationException")
    }catch(ex: IllegalArgumentException){
        println("IllegalArgumentException")
    }

}

fun main() {
    println("main function  was executed")

    make_http_request(
        "https://mathiasbynens.be/demo/url-regex",
    { 
        s_response -> 
        
        val o_url_regex = Regex("_^(?:(?:https?|ftp)://)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\x{00a1}-\x{ffff}0-9]+-?)*[a-z\x{00a1}-\x{ffff}0-9]+)(?:\.(?:[a-z\x{00a1}-\x{ffff}0-9]+-?)*[a-z\x{00a1}-\x{ffff}0-9]+)*(?:\.(?:[a-z\x{00a1}-\x{ffff}]{2,})))(?::\d{2,5})?(?:/[^\s]*)?$_iuS")

        val o_matches = o_url_regex.findAll(s_response);
        
        for(i in (0..(o_matches.toList().size)-1)){
            println(o_matches.toList()[i].value)
        }

        // println(s_response)
    
    }
    ); 
    var match_url_regex = Regex("(https)", RegexOption.MULTILINE)
    match_url_regex = Regex("^(https?|ftp)://[^\\s/$.?#].[^\\s]*$")
      
//     IGNORE_CASE – enables case-insensitive matching
//     MULTILINE – changes the meaning of ^ and $ (see Pattern)
//     LITERAL – causes metacharacters or escape sequences in the pattern to be given no special meaning
//     UNIX_LINES – in this mode, only the \n is recognized as a line terminator
//     COMMENTS – permits whitespace and comments in the pattern
//     DOT_MATCHES_ALL – causes the dot to match any character, including a line terminator
//     CANON_EQ – enables equivalence by canonical decomposition (see Pattern)
   val matchResults = match_url_regex.findAll(
       """    <!-- icon !-->
   <link rel="icon" type="image/png" href="/Images/logo_rip.png" width="55" height="55">

   <!-- css !-->
   <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" crossorigin="anonymous">

   <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" crossorigin="anonymous">
   <link rel="stylesheet" type="text/css" href="/assets/css/master.min.css?v=1.0.0.23385">
   """)
   println((matchResults.toList()))
   for( i in (0..(matchResults.toList().size)-1)){
       println(matchResults.toList()[i].value)
   }
}
